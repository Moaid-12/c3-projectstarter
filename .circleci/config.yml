version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    steps:
      - run:
          name: Destroy backend environments
          when: on_fail
          command: |
            # Your code here
            aws cloudformation delete-stack --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
            #exit 1
  
            

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            # Your code here
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
          
  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            # Your code here
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: run front-end test
          command: |
            # Your code here
            cd frontend
            npm install
            npm run test   

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: run Back-end test
          command: |
            # Your code here
            cd backend
            npm install
            npm run test

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: scan front-end 
          command: |
            # Your code here
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force          

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: scan Back-end
          command: |
            # Your code here
            cd backend
            npm install
            npm audit fix --audit-level=critical --force

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          command: |
            yum -y install tar gzip
#       - run:
#           name: Ensure back-end infrastructure exists
#           command: |
#             aws cloudformation deploy \
#             --template-file .circleci/files/backend.yml \
#             --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
#             --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
#             --tags project=udapeople_backend
#       - run:
#           name: Ensure front-end infrastructure exist
#           command: |
#             aws cloudformation deploy \
#             --template-file .circleci/files/frontend.yml \
#             --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
#             --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
#             --tags project=udapeople_frontend
      - run:
          name: Add the EC2 instance IP to the Ansible inventory
          command: |
            cd .circleci/ansible
            aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --output text >> inventory.txt
            cat inventory.txt
#       - destroy-environment
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt

  configure-infrastructure:
    docker:
      - image: cimg/python:3.11.2
    steps:
      - checkout
      - add_ssh_keys:
              # You can get this ID in the section where you registered the SSH Key
              fingerprints: ["17:ad:46:99:4e:16:a7:f4:8c:f0:74:2f:c6:ee:47:28"]    
      - run:
          name: Install Ansible
          command: |
            pip install --user ansible
      - attach_workspace:
          at: ~/
      - run:
          name: Run Playbook and Configure server
          command: | 
            cd .circleci/ansible
            cat inventory.txt
            ansible-playbook -i inventory.txt configure-server.yml
  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            # Run and save the migration output
            npm run migrations > migrations_dump.txt
      - run:
          name: Send migration status to kvdb.io OR memstash.io
          command: |   
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
                  # If you are using memstash.io, generate the token "7933fe63-4687-4fa1-8426-aa25aa1730ec" on the website
              #curl -H "Content-Type: text/plain" -H "token: 7933fe63-4687-4fa1-8426-aa25aa1730ec" --request PUT --data "1" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID:0:7}
              # If you are using kvdb.io, generate the bucket ID "9GE4jRtKznmVKRfvdBABBe" in your local terminal first
              curl --insecure https://kvdb.io/Lg3oiw6LwbK7p17JCPhw4b/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            fi
            curl --insecure https://kvdb.io/Lg3oiw6LwbK7p17JCPhw4b/migration_${CIRCLE_WORKFLOW_ID:0:7}
workflows:
  default:
    jobs:
#       - build-frontend
#       - build-backend
#       - test-frontend:
#           requires: [build-frontend]
#       - test-backend:
#           requires: [build-backend]
#       - scan-frontend:
#           requires: [build-frontend]
#       - scan-backend:
#           requires: [build-backend]
      - deploy-infrastructure
#           requires: [test-frontend, test-backend, scan-frontend, scan-backend]
#           filters:
#             branches:
#               only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
