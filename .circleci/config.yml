version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      stack:
        default: "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}"
        type: string
      # Add parameter here  
    steps:
      - run:
          name: Destroy backend environments
          when: on_fail
          command: |
            # Your code here
            aws cloudformation delete-stack --stack-name <<parameters.stack>>
            #exit 1
  revert-migrations:
    description: Revert the last migration
    parameters:
      workflow_id:
        type: string      
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            # Example: kvdb.io
            SUCCESS=$(curl --insecure  https://kvdb.io/Lg3oiw6LwbK7p17JCPhw4b/migration_<< parameters.workflow_id >>)
            # Logic for reverting the database state
            if (( $SUCCESS == 1 ));
            then
              cd ~/project/backend
              npm install
              npm run migration:revert
            fi  
            

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            # Your code here
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
          
  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            # Your code here
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: run front-end test
          command: |
            # Your code here
            cd frontend
            npm install
            npm run test   

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: run Back-end test
          command: |
            # Your code here
            cd backend
            npm install
            npm run test

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: scan front-end 
          command: |
            # Your code here
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force          

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: scan Back-end
          command: |
            # Your code here
            cd backend
            npm install
            npm audit fix --audit-level=critical --force

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          command: |
            yum -y install tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/backend.yml \
            --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
            --tags project=udapeople_backend
      - destroy-environment:
          stack: udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/frontend.yml \
            --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
            --tags project=udapeople_frontend
      - destroy-environment:
          stack: udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}
      - run:
          name: Add the EC2 instance IP to the Ansible inventory
          command: |
            cd .circleci/ansible
            aws ec2 describe-instances --filters "Name=tag:project,Values=udapeople_backend" \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --output text >> inventory.txt
            cat inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
  configure-infrastructure:
    docker:
      - image: cimg/python:3.11.2
    steps:
      - checkout
      - add_ssh_keys:
              # You can get this ID in the section where you registered the SSH Key
              fingerprints: ["17:ad:46:99:4e:16:a7:f4:8c:f0:74:2f:c6:ee:47:28"]    
      - run:
          name: Install Ansible
          command: |
            pip install --user ansible
      - attach_workspace:
          at: ~/
      - run:
          name: Run Playbook and Configure server
          command: | 
            cd .circleci/ansible
            cat inventory.txt
            ansible-playbook -i inventory.txt configure-server.yml
  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            # Run and save the migration output
            npm run migrations > migrations_dump.txt
            
      - run:
          name: Send migration status to kvdb.io OR memstash.io
          command: | 
            cd backend
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then 
              curl --insecure https://kvdb.io/Lg3oiw6LwbK7p17JCPhw4b/migration_${CIRCLE_WORKFLOW_ID:0:7} -d "1"
            fi
            #curl --insecure https://kvdb.io/Lg3oiw6LwbK7p17JCPhw4b/migration_${CIRCLE_WORKFLOW_ID:0:7}
            
  deploy-frontend:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          command: |
            yum -y install tar gzip
      - run:
          name: install dependencies
          command: |
            curl --silent --location https://rpm.nodesource.com/setup_13.x | bash -
            yum -y install nodejs
      - run:
          name: pick api for backend
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances --filters "Name=tag:project,Values=udapeople_backend" \
            --query 'Reservations[*].Instances[*].PublicIpAddress' --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
         name: Deploy frontend objects
         command: |
           cd frontend
           npm install
           npm run build
           tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
           aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive

  deploy-backend:
    docker:
      - image: cimg/python:3.11.2
    steps:
      - checkout
      - add_ssh_keys:
              # You can get this ID in the section where you registered the SSH Key
              fingerprints: ["17:ad:46:99:4e:16:a7:f4:8c:f0:74:2f:c6:ee:47:28"]    
      - run: 
          name: install Nodejs dependencies
          command: |  
            sudo apt install curl
            curl -fsSL https://deb.nodesource.com/setup_14.x | sudo -E bash - &&\
            sudo apt-get install nodejs
            node --version
      - run: 
          name: install tar dependencies
          command: |
            sudo apt install tar gzip
      - run:
          name: Install Ansible
          command: |
            pip install --user ansible
      - attach_workspace:
          at: ~/
      - run:
          name: Deploy backend
          command: |
            cd backend
            npm i
            npm run build
            cd ..
            tar -C backend -czvf artifact.tar.gz .
            pwd
            cd .circleci/ansible
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
      - destroy-environment:
          stack: udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
  
  smoke-test:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout  
      - run: 
          name: install curl dependencies
          command: |  
            sudo apt install curl
      - run:
          name: backend smoke-test
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances --filters "Name=tag:project,Values=udapeople_backend" \
            --query 'Reservations[*].Instances[*].PublicIpAddress' --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            if curl "${API_URL}/api/status" | grep "ok"
            then
              return 0
            else
              return 1
            fi
      - run:
          name: frontend smoke-test
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"            
            echo ${URL} 
            if curl -s ${URL} | grep "Welcome"
            then
              # Change this to 0 after the job fails
              return 1
            else
              return 1
            fi
          
workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - scan-backend:
          requires: [build-backend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
